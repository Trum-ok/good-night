import os
import time
import random
import asyncio
import pyrogram
import logging
import schedule

from datetime import datetime, timedelta
from dotenv import load_dotenv
from pyrogram import Client, errors, filters, idle
from pyrogram.handlers import MessageHandler

logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s',
                    handlers=[logging.FileHandler("bot.log"),
                              logging.StreamHandler()])


load_dotenv(override=True)

API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
PHONE = os.getenv("PHONE")
CHAT_USERNAME = os.getenv("CHAT_USERNAME")
SELF_USERNAME = os.getenv("SELF_USERNAME")
logging.info('Environment variables loaded.')


app = Client("my_account", api_id=API_ID, api_hash=API_HASH)
logging.info('Client created.')


"""
TODO:
–æ—Ç–ª–æ–∂–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
–≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
–æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É—Ç—Ä–æ / –≤–µ—á–µ—Ä
–æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
–ø–æ–º–µ–Ω—è—Ç—å –±–∞–∑—É/–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç/—ç–º–æ–¥–∑–∏
"""

def random_time(start_time_str, end_time_str):
    start_time = datetime.strptime(start_time_str, "%H:%M")
    end_time = datetime.strptime(end_time_str, "%H:%M")
    if end_time < start_time:
        end_time += timedelta(days=1)
    delta_seconds = int((end_time - start_time).total_seconds())
    random_seconds = random.randint(0, delta_seconds)
    random_time = start_time + timedelta(seconds=random_seconds)
    return random_time.strftime("%H:%M")


def random_night_message():
    base_msg = {
        '1': 'c–ª–∞–¥–∫–∏—Ö —Å–ø–æ—Ç—å',
        '2': 'c–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤',
        '3': '—É—é—Ç–Ω—ã—Ö —Å–ø–æ—Ç—å',
        '4': '–¥–æ –∑–∞–≤—Ç—Ä–∞',
        '5': '—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏',
        '6': '—Å–ø–æ–∫–∏ –Ω–æ–∫–∏'
    }
    compliment = {
        '1': ', –º–æ—è –∫–µ–≥–µ–ª—å–∫–∞',
        '2': ', –∫–µ–≥–µ–ª—å–∫–∞',
        '3': ', –∑–∞–π–∫–∞', 
        '4': ', —à—É—à—É–ª—è',
        '5': ''
    }
    emoji = {
        '1': ' ‚ù§Ô∏è',
        '2': ' üíì',
        '3': ' üíû',
        '4': ' üí§',
        '5': ' ü•∞‚ú®',
        '6': ' ü•∞',
        '7': ' ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è',
        '8': ' ‚ú®',
        '9': ' ü•∞ü•∞ü•∞',
        '10': ''
    }
    return random.choice(list(base_msg.values()))+random.choice(list(compliment.values()))+random.choice(list(emoji.values()))


async def send_message(msg: str) -> None:
    try:
        await app.send_message(CHAT_USERNAME, msg)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {datetime.now()}")
    except errors.RPCError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await app.send_message(SELF_USERNAME, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–±–µ: {datetime.now()}")
        except errors.RPCError as error:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–µ–±–µ: {error}")


async def night() -> None:
    night_msg = random_night_message()
    night_time = random_time("23:44", "01:24")
    await app.send_message(SELF_USERNAME, 
                           f'–°–æ–æ–±—â–µ–Ω–∏–µ: "{night_msg}" –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: {night_time}\n'
                           '–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º "–æ—Ç–º–µ–Ω–∞"\n'
                           '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º "–≤—Ä–µ–º—è HH:MM"\n'
                           '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º "—Ç–µ–∫—Å—Ç"')
    logging.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ: "{night_msg}" –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: {night_time}')
    schedule.every().day.at('03:21').do(lambda: asyncio.create_task(send_message(night_msg))).tag('night')


# async def handle_response(client, message):
#     logging.info("handle_response triggered")
#     if message.reply_to_message:
#         logging.info("Message is a reply")
#         if message.reply_to_message.from_user.username == SELF_USERNAME:
#             logging.info("Message is a reply to SELF_USERNAME")
#             if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
#                 schedule.clear('night')
#                 await message.reply("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
#                 logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
#             elif message.text.lower().startswith("–≤—Ä–µ–º—è"):
#                 try:
#                     new_time = message.text.split()[1]
#                     schedule.clear('night')
#                     schedule.every().day.at(new_time).do(lambda: asyncio.create_task(send_message(random_night_message()))).tag('night')
#                     await message.reply(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_time}.")
#                     logging.info(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_time}.")
#                 except IndexError:
#                     await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
#             elif message.text.lower().startswith("—Ç–µ–∫—Å—Ç"):
#                 new_message = " ".join(message.text.split()[1:])
#                 schedule.clear('night')
#                 schedule.every().day.at(random_time("23:44", "01:24")).do(lambda: asyncio.create_task(send_message(new_message))).tag('night')
#                 await message.reply(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_message}.")
#                 logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_message}.")  
    

async def main():
    await app.start()
    # app.add_handler(MessageHandler(handle_response))
    # logging.info("Handler added.")
    schedule.every().day.at('21:00').do(lambda: asyncio.create_task(night()))
    schedule.every().day.at('05:00').do(lambda: schedule.clear('night'))
    logging.info("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π...")
    
    # await pyrogram.idle()

    try:
        while True:
            schedule.run_pending()
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        logging.info("–°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    finally:
        await app.stop()


if __name__ == "__main__":
    asyncio.run(main())
